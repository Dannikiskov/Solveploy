---
- hosts: localhost
  connection: local
  tasks:
    - name: Start minikube
      command: minikube start --cpus=6 --memory=6000

    - name: Create namespaces
      kubernetes.core.k8s:
        src: ../../kubernetes-deployments/namespace-creation.yaml

    - name: Apply rabbitmq operator
      kubernetes.core.k8s:
        src: ../../kubernetes-deployments/rabbitmq-operator.yaml

    - name: Apply rabbitmq definition
      kubernetes.core.k8s:
        src: ../../kubernetes-deployments/rabbitmq-definition.yaml

    - name: Get minikube docker-env
      shell: minikube docker-env
      register: minikube_docker_env

    - name: Build backend base image
      community.docker.docker_image_build:
        path: "../../base-image/"
        name: "solveploy-backend-base-image"
        dockerfile: "Dockerfile"
        rebuild: "always"
        docker_host: "{{ (minikube_docker_env.stdout | regex_search('export DOCKER_HOST=\"(.*?)\"', '\\1')) | first }}"
        tls: "{{ (minikube_docker_env.stdout | regex_search('export DOCKER_TLS_VERIFY=\"(.*?)\"', '\\1')) | first | bool }}"
        validate_certs: "{{ (minikube_docker_env.stdout | regex_search('export DOCKER_TLS_VERIFY=\"(.*?)\"', '\\1')) | first | bool }}"
        ca_path: "{{ (minikube_docker_env.stdout | regex_search('export DOCKER_CERT_PATH=\"(.*?)\"', '\\1')) | first }}/ca.pem"
        client_cert: "{{ (minikube_docker_env.stdout | regex_search('export DOCKER_CERT_PATH=\"(.*?)\"', '\\1')) | first }}/cert.pem"
        client_key: "{{ (minikube_docker_env.stdout | regex_search('export DOCKER_CERT_PATH=\"(.*?)\"', '\\1')) | first }}/key.pem"
      loop:
        - {
            image: "solveploy-backend-base-image",
            dockerfile: "Dockerfile",
            context: "../../base-image/",
          }

    - name: Build Docker images
      community.docker.docker_image_build:
        path: "{{ item.context }}"
        name: "{{ item.image }}"
        dockerfile: "{{ item.dockerfile }}"
        rebuild: "always"
        docker_host: "{{ (minikube_docker_env.stdout | regex_search('export DOCKER_HOST=\"(.*?)\"', '\\1')) | first }}"
        tls: "{{ (minikube_docker_env.stdout | regex_search('export DOCKER_TLS_VERIFY=\"(.*?)\"', '\\1')) | first | bool }}"
        validate_certs: "{{ (minikube_docker_env.stdout | regex_search('export DOCKER_TLS_VERIFY=\"(.*?)\"', '\\1')) | first | bool }}"
        ca_path: "{{ (minikube_docker_env.stdout | regex_search('export DOCKER_CERT_PATH=\"(.*?)\"', '\\1')) | first }}/ca.pem"
        client_cert: "{{ (minikube_docker_env.stdout | regex_search('export DOCKER_CERT_PATH=\"(.*?)\"', '\\1')) | first }}/cert.pem"
        client_key: "{{ (minikube_docker_env.stdout | regex_search('export DOCKER_CERT_PATH=\"(.*?)\"', '\\1')) | first }}/key.pem"
      async: 7200
      poll: 0
      register: docker_build
      loop:
        - {
            image: "frontend",
            dockerfile: "Dockerfile",
            context: "../../services/frontend/",
          }
        - {
            image: "api-gateway",
            dockerfile: "Dockerfile",
            context: "../../services/api_gateway/",
          }
        - {
            image: "job-handler",
            dockerfile: "Dockerfile",
            context: "../../services/job_handler/",
          }
        - {
            image: "knowledge-base",
            dockerfile: "Dockerfile",
            context: "../../services/knowledge_base/",
          }
        - {
            image: "mzn-pod",
            dockerfile: "Dockerfile",
            context: "../../services/mzn_pod/",
          }
        - {
            image: "sat-pod",
            dockerfile: "Dockerfile",
            context: "../../services/sat_pod/",
          }
        - {
            image: "maxsat-pod",
            dockerfile: "Dockerfile",
            context: "../../services/maxsat_pod/",
          }

    - name: Wait for Docker image builds to finish
      async_status:
        jid: "{{ item.ansible_job_id }}"
      register: job_result
      until: job_result.finished
      retries: 300
      loop: "{{ docker_build.results }}"

    - name: Get secret from rabbitmq-system namespace
      kubernetes.core.k8s_info:
        kind: Secret
        name: message-broker-default-user
        namespace: rabbitmq-system
      register: secret_info
      until: (secret_info.resources | default([])) | length > 0
      retries: 20
      delay: 10

    - name: Create secret in default namespace
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: "{{ secret_info.resources[0].metadata.name }}"
            namespace: default
          type: "{{ secret_info.resources[0].type }}"
          data: "{{ secret_info.resources[0].data }}"

    - name: Apply Kubernetes deployments and services
      kubernetes.core.k8s:
        src: "{{ item }}"
      loop:
        - ../../kubernetes-deployments/api-gateway-deployment.yaml
        - ../../kubernetes-deployments/api-gateway-service.yaml
        - ../../kubernetes-deployments/job-handler-deployment.yaml
        - ../../kubernetes-deployments/job-handler-service.yaml
        - ../../kubernetes-deployments/role-job-creator.yaml
        - ../../kubernetes-deployments/cluster-role-job-creator.yaml
        - ../../kubernetes-deployments/clusterrolebinding-job-creator.yaml
        - ../../kubernetes-deployments/knowledge-base-database-deployment.yaml
        - ../../kubernetes-deployments/knowledge-base-database-service.yaml
        - ../../kubernetes-deployments/knowledge-base-deployment.yaml
        - ../../kubernetes-deployments/knowledge-base-service.yaml
        - ../../kubernetes-deployments/frontend-deployment.yaml
        - ../../kubernetes-deployments/frontend-service.yaml
    
    - name: Add ngrok Helm repository
      ansible.builtin.command: helm repo add ngrok https://ngrok.github.io/kubernetes-ingress-controller

    - name: Update Helm repositories
      ansible.builtin.command: helm repo update

    - name: Install ngrok-ingress-controller
      kubernetes.core.helm:
        name: ngrok
        chart_ref: ngrok/ngrok-ingress-controller
        release_namespace: ngrok-ingress-controller
        create_namespace: true
        values:
          credentials:
            apiKey: "{{ NGROK_API_KEY }}"
            authtoken: "{{ NGROK_AUTHTOKEN }}"
    
    - name: Apply Kubernetes deployments and services
      kubernetes.core.k8s:
        src: "{{ item }}"
      loop:
        - ../../kubernetes-deployments/ngrok-ingress.yaml
