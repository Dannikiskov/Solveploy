---
- name: Deploy Application Locally
  become: true
  hosts: localhost
  connection: local
  vars:
    kubeconfig_path: "/home/hmbl/.kube/config"
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"

    
  tasks:
    - name: Start minikube
      become: false
      command: minikube start --cpus=4 --memory=6000 --driver=docker

    - name: install pip3
      ansible.builtin.package:
        name: python3-pip
        state: present
  
    - name: install python3 libraries
      ansible.builtin.pip:
        name: "{{ item }}"
      loop:
        - kubernetes
        - openshift
        - docker
        - PyYAML

    - name: Create namespaces
      kubernetes.core.k8s:
        state: present
        definition: "{{ lookup('file', '../../kubernetes-deployments/namespace-creation.yaml') | from_yaml_all }}"

    - name: Apply rabbitmq operator
      kubernetes.core.k8s:
        state: present
        definition: "{{ lookup('file', '../../kubernetes-deployments/rabbitmq-operator.yaml') | from_yaml_all }}"

    - name: Apply rabbitmq definition
      kubernetes.core.k8s:
        state: present
        definition: "{{ lookup('file', '../../kubernetes-deployments/rabbitmq-definition.yaml') | from_yaml_all }}"

    - name: Get minikube docker-env
      become: false
      shell: minikube docker-env
      register: minikube_docker_env

    - name: Build backend base image
      community.docker.docker_image_build:
        path: "/mnt/c/Users/danni/Documents/Solveploy/images"
        name: "solveploy-base"
        dockerfile: "DockerfileBase"
        rebuild: "always"
        docker_host: "{{ (minikube_docker_env.stdout | regex_search('export DOCKER_HOST=\"(.*?)\"', '\\1')) | first }}"
        tls: "{{ (minikube_docker_env.stdout | regex_search('export DOCKER_TLS_VERIFY=\"(.*?)\"', '\\1')) | first | bool }}"
        validate_certs: "{{ (minikube_docker_env.stdout | regex_search('export DOCKER_TLS_VERIFY=\"(.*?)\"', '\\1')) | first | bool }}"
        ca_path: "{{ (minikube_docker_env.stdout | regex_search('export DOCKER_CERT_PATH=\"(.*?)\"', '\\1')) | first }}/ca.pem"
        client_cert: "{{ (minikube_docker_env.stdout | regex_search('export DOCKER_CERT_PATH=\"(.*?)\"', '\\1')) | first }}/cert.pem"
        client_key: "{{ (minikube_docker_env.stdout | regex_search('export DOCKER_CERT_PATH=\"(.*?)\"', '\\1')) | first }}/key.pem"

    - name: Build backend mzn image
      community.docker.docker_image_build:
        path: "/mnt/c/Users/danni/Documents/Solveploy/images"
        name: "solveploy-mzn"
        dockerfile: "DockerfileMzn"
        rebuild: "always"
        docker_host: "{{ (minikube_docker_env.stdout | regex_search('export DOCKER_HOST=\"(.*?)\"', '\\1')) | first }}"
        tls: "{{ (minikube_docker_env.stdout | regex_search('export DOCKER_TLS_VERIFY=\"(.*?)\"', '\\1')) | first | bool }}"
        validate_certs: "{{ (minikube_docker_env.stdout | regex_search('export DOCKER_TLS_VERIFY=\"(.*?)\"', '\\1')) | first | bool }}"
        ca_path: "{{ (minikube_docker_env.stdout | regex_search('export DOCKER_CERT_PATH=\"(.*?)\"', '\\1')) | first }}/ca.pem"
        client_cert: "{{ (minikube_docker_env.stdout | regex_search('export DOCKER_CERT_PATH=\"(.*?)\"', '\\1')) | first }}/cert.pem"
        client_key: "{{ (minikube_docker_env.stdout | regex_search('export DOCKER_CERT_PATH=\"(.*?)\"', '\\1')) | first }}/key.pem"
    

    - name: Build Docker images
      community.docker.docker_image_build:
        path: "{{ item.context }}"
        name: "{{ item.image }}"
        dockerfile: "{{ item.dockerfile }}"
        rebuild: "always"
        docker_host: "{{ (minikube_docker_env.stdout | regex_search('export DOCKER_HOST=\"(.*?)\"', '\\1')) | first }}"
        tls: "{{ (minikube_docker_env.stdout | regex_search('export DOCKER_TLS_VERIFY=\"(.*?)\"', '\\1')) | first | bool }}"
        validate_certs: "{{ (minikube_docker_env.stdout | regex_search('export DOCKER_TLS_VERIFY=\"(.*?)\"', '\\1')) | first | bool }}"
        ca_path: "{{ (minikube_docker_env.stdout | regex_search('export DOCKER_CERT_PATH=\"(.*?)\"', '\\1')) | first }}/ca.pem"
        client_cert: "{{ (minikube_docker_env.stdout | regex_search('export DOCKER_CERT_PATH=\"(.*?)\"', '\\1')) | first }}/cert.pem"
        client_key: "{{ (minikube_docker_env.stdout | regex_search('export DOCKER_CERT_PATH=\"(.*?)\"', '\\1')) | first }}/key.pem"
      async: 7200
      poll: 0
      register: docker_build
      loop:
        - {
            image: "frontend",
            dockerfile: "Dockerfile",
            context: "/mnt/c/Users/danni/Documents/Solveploy/services/frontend/",
          }
        - {
            image: "api-gateway",
            dockerfile: "Dockerfile",
            context: "/mnt/c/Users/danni/Documents/Solveploy/services/api_gateway/",
          }
        - {
            image: "job-handler",
            dockerfile: "Dockerfile",
            context: "/mnt/c/Users/danni/Documents/Solveploy/services/job_handler/",
          }
        - {
            image: "knowledge-base",
            dockerfile: "Dockerfile",
            context: "/mnt/c/Users/danni/Documents/Solveploy/services/knowledge_base/",
          }
        - {
            image: "mzn-pod",
            dockerfile: "Dockerfile",
            context: "/mnt/c/Users/danni/Documents/Solveploy/services/mzn_pod/",
          }
        - {
            image: "sat-pod",
            dockerfile: "Dockerfile",
            context: "/mnt/c/Users/danni/Documents/Solveploy/services/sat_pod/",
          }
        - {
            image: "maxsat-pod",
            dockerfile: "Dockerfile",
            context: "/mnt/c/Users/danni/Documents/Solveploy/services/maxsat_pod/",
          }

    - name: Wait for Docker image builds to finish
      async_status:
        jid: "{{ item.ansible_job_id }}"
      register: job_result
      until: job_result.finished
      retries: 300
      loop: "{{ docker_build.results }}"

    - name: Get secret from rabbitmq-system namespace
      kubernetes.core.k8s_info:
        kind: Secret
        name: message-broker-default-user
        namespace: rabbitmq-system
      register: secret_info
      until: (secret_info.resources | default([])) | length > 0
      retries: 20
      delay: 10

    - name: Create secret in default namespace
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: "{{ secret_info.resources[0].metadata.name }}"
            namespace: default
          type: "{{ secret_info.resources[0].type }}"
          data: "{{ secret_info.resources[0].data }}"

    - name: Apply Kubernetes deployments and services
      kubernetes.core.k8s:
        definition: "{{ item }}"
      loop:
        - "{{ lookup('file', '../../kubernetes-deployments/role-job-creator.yaml') | from_yaml_all }}"
        - "{{ lookup('file', '../../kubernetes-deployments/cluster-role-job-creator.yaml') | from_yaml_all }}"
        - "{{ lookup('file', '../../kubernetes-deployments/clusterrolebinding-job-creator.yaml') | from_yaml_all }}"
        - "{{ lookup('file', '../../kubernetes-deployments/api-gateway-deployment.yaml') | from_yaml_all }}"
        - "{{ lookup('file', '../../kubernetes-deployments/api-gateway-service.yaml') | from_yaml_all }}"
        - "{{ lookup('file', '../../kubernetes-deployments/job-handler-deployment.yaml') | from_yaml_all }}"
        - "{{ lookup('file', '../../kubernetes-deployments/job-handler-service.yaml') | from_yaml_all }}"
        - "{{ lookup('file', '../../kubernetes-deployments/knowledge-base-database-deployment.yaml') | from_yaml_all }}"
        - "{{ lookup('file', '../../kubernetes-deployments/knowledge-base-database-service.yaml') | from_yaml_all }}"
        - "{{ lookup('file', '../../kubernetes-deployments/knowledge-base-deployment.yaml') | from_yaml_all }}"
        - "{{ lookup('file', '../../kubernetes-deployments/knowledge-base-service.yaml') | from_yaml_all }}"
        - "{{ lookup('file', '../../kubernetes-deployments/frontend-deployment.yaml') | from_yaml_all }}"
        - "{{ lookup('file', '../../kubernetes-deployments/frontend-service.yaml') | from_yaml_all }}"
