---
- name: Install Ansible Galaxy roles
  become: true
  hosts: kubernetes_hosts
  connection: local
  vars:
    kubeconfig_path: "/home/hmbl/.kube/config"
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"

  tasks:
    - name: Add user to docker group
      become: yes
      user:
        name: "hmbl"
        groups: docker
        append: yes
      tags: 
        - docker
      
    - name: Set Docker socket permissions
      become: yes
      file:
        path: /var/run/docker.sock
        mode: "0777"
      tags:
        - docker

    - name: Start minikube
      become: false
      command: minikube start --cpus=4 --memory=5000 --driver=docker

    - name: install pip3
      ansible.builtin.package:
        name: python3-pip
        state: present
  
    - name: install python3 libraries
      ansible.builtin.pip:
        name: "{{ item }}"
      loop:
        - kubernetes
        - openshift
        - docker
        - PyYAML
    
    - name: Local Path Provisionar
      ansible.builtin.shell:
        cmd: kubectl apply -f https://raw.githubusercontent.com/rancher/local-path-provisioner/master/deploy/local-path-storage.yaml

    - name: Annotate storageclass
      ansible.builtin.shell:
        cmd: kubectl annotate storageclass local-path storageclass.kubernetes.io/is-default-class=true
    
    - name: Create namespaces
      kubernetes.core.k8s:
        state: present
        definition: "{{ lookup('file', '../../k8s-manifests/namespace-creation.yaml') | from_yaml_all }}"
    
    - name: Add ngrok Helm repository
      ansible.builtin.command: helm repo add ngrok https://ngrok.github.io/kubernetes-ingress-controller
    
    - name: Add helm repo prometheus-community
      ansible.builtin.command: helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
    
    - name: Add Bitnami Helm repository
      ansible.builtin.command: helm repo add bitnami https://charts.bitnami.com/bitnami

    - name: Update Helm repositories
      ansible.builtin.command: helm repo update

    - name: Deploy RabbitMQ
      kubernetes.core.helm:
        name: rabbitmq
        chart_ref: bitnami/rabbitmq
        release_namespace: rabbitmq-system
        values:
          existingSecret: rabbitmq-credentials
          replicaCount: 3
          persistence:
            enabled: true
          rabbitmq:
            rabbitmq.conf: |
              heartbeat_timeout = 3600
    
    - name: Get secret from rabbitmq-system namespace
      kubernetes.core.k8s_info:
        kind: Secret
        name: rabbitmq
        namespace: rabbitmq-system
      register: secret_info
      until: (secret_info.resources | default([])) | length > 0
      retries: 20
      delay: 10

    - name: Create secret in default namespace
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: "rabbitmq"
            namespace: default
          type: "{{ secret_info.resources[0].type }}"
          data: "{{ secret_info.resources[0].data }}"

    - name: Get minikube docker-env
      become: false
      shell: minikube docker-env
      register: minikube_docker_env

    - name: Build backend base image
      community.docker.docker_image_build:
        path: "../../images/"
        name: "solveploy-base"
        dockerfile: "DockerfileBase"
        rebuild: "always"
        docker_host: "{{ (minikube_docker_env.stdout | regex_search('export DOCKER_HOST=\"(.*?)\"', '\\1')) | first }}"
        tls: "{{ (minikube_docker_env.stdout | regex_search('export DOCKER_TLS_VERIFY=\"(.*?)\"', '\\1')) | first | bool }}"
        validate_certs: "{{ (minikube_docker_env.stdout | regex_search('export DOCKER_TLS_VERIFY=\"(.*?)\"', '\\1')) | first | bool }}"
        ca_path: "{{ (minikube_docker_env.stdout | regex_search('export DOCKER_CERT_PATH=\"(.*?)\"', '\\1')) | first }}/ca.pem"
        client_cert: "{{ (minikube_docker_env.stdout | regex_search('export DOCKER_CERT_PATH=\"(.*?)\"', '\\1')) | first }}/cert.pem"
        client_key: "{{ (minikube_docker_env.stdout | regex_search('export DOCKER_CERT_PATH=\"(.*?)\"', '\\1')) | first }}/key.pem"

    - name: Build Docker images
      community.docker.docker_image_build:
        path: "{{ item.context }}"
        name: "{{ item.image }}"
        dockerfile: "{{ item.dockerfile }}"
        rebuild: "always"
        docker_host: "{{ (minikube_docker_env.stdout | regex_search('export DOCKER_HOST=\"(.*?)\"', '\\1')) | first }}"
        tls: "{{ (minikube_docker_env.stdout | regex_search('export DOCKER_TLS_VERIFY=\"(.*?)\"', '\\1')) | first | bool }}"
        validate_certs: "{{ (minikube_docker_env.stdout | regex_search('export DOCKER_TLS_VERIFY=\"(.*?)\"', '\\1')) | first | bool }}"
        ca_path: "{{ (minikube_docker_env.stdout | regex_search('export DOCKER_CERT_PATH=\"(.*?)\"', '\\1')) | first }}/ca.pem"
        client_cert: "{{ (minikube_docker_env.stdout | regex_search('export DOCKER_CERT_PATH=\"(.*?)\"', '\\1')) | first }}/cert.pem"
        client_key: "{{ (minikube_docker_env.stdout | regex_search('export DOCKER_CERT_PATH=\"(.*?)\"', '\\1')) | first }}/key.pem"
      async: 7200
      poll: 0
      register: docker_build
      loop:
        - {
            image: "frontend",
            dockerfile: "Dockerfile",
            context: "../../services/frontend/",
          }
        - {
            image: "api-gateway",
            dockerfile: "Dockerfile",
            context: "../../services/api_gateway/",
          }
        - {
            image: "job-handler",
            dockerfile: "Dockerfile",
            context: "../../services/job_handler/",
          }
        - {
            image: "knowledge-base",
            dockerfile: "Dockerfile",
            context: "../../services/knowledge_base/",
          }
        - {
            image: "mzn-pod",
            dockerfile: "Dockerfile",
            context: "../../services/mzn_pod/",
          }
        - {
            image: "sat-pod",
            dockerfile: "Dockerfile",
            context: "../../services/sat_pod/",
          }
        - {
            image: "maxsat-pod",
            dockerfile: "Dockerfile",
            context: "../../services/maxsat_pod/",
          }

    - name: Wait for Docker image builds to finish
      async_status:
        jid: "{{ item.ansible_job_id }}"
      register: job_result
      until: job_result.finished
      retries: 300
      loop: "{{ docker_build.results }}"


    - name: Apply Kubernetes deployments and services
      kubernetes.core.k8s:
        definition: "{{ item }}"
      loop:
        - "{{ lookup('file', '../../k8s-manifests/postgres-pv.yaml') | from_yaml_all }}"
        - "{{ lookup('file', '../../k8s-manifests/postgres-pvc.yaml') | from_yaml_all }}"
        - "{{ lookup('file', '../../k8s-manifests/cluster-role-job-creator.yaml') | from_yaml_all }}"
        - "{{ lookup('file', '../../k8s-manifests/clusterrolebinding-job-creator.yaml') | from_yaml_all }}"
        - "{{ lookup('file', '../../k8s-manifests/api-gateway-deployment.yaml') | from_yaml_all }}"
        - "{{ lookup('file', '../../k8s-manifests/api-gateway-service.yaml') | from_yaml_all }}"
        - "{{ lookup('file', '../../k8s-manifests/job-handler-deployment.yaml') | from_yaml_all }}"
        - "{{ lookup('file', '../../k8s-manifests/job-handler-service.yaml') | from_yaml_all }}"
        - "{{ lookup('file', '../../k8s-manifests/knowledge-base-database-deployment.yaml') | from_yaml_all }}"
        - "{{ lookup('file', '../../k8s-manifests/knowledge-base-database-service.yaml') | from_yaml_all }}"
        - "{{ lookup('file', '../../k8s-manifests/knowledge-base-deployment.yaml') | from_yaml_all }}"
        - "{{ lookup('file', '../../k8s-manifests/knowledge-base-service.yaml') | from_yaml_all }}"
        - "{{ lookup('file', '../../k8s-manifests/frontend-deployment.yaml') | from_yaml_all }}"
        - "{{ lookup('file', '../../k8s-manifests/frontend-service.yaml') | from_yaml_all }}"
    
