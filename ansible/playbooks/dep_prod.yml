---
- name: Deploying Solveployw
  hosts: kubernetes_hosts
  become: true
  roles:
    - darkwizard242.helm

  tasks:
    - name: Command turn of swap
      ansible.builtin.command:
        cmd: swapoff -a

    - name: Add Docker's official GPG key
      ansible.builtin.shell:
        cmd:  |
          apt-get update
          apt-get install ca-certificates curl
          install -m 0755 -d /etc/apt/keyrings
          curl -fsSL https://download.docker.com/linux/debian/gpg -o /etc/apt/keyrings/docker.asc
          chmod a+r /etc/apt/keyrings/docker.asc
    
    - name: Set up the Docker repository
      ansible.builtin.shell:
        cmd:  |
          echo \
            "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/debian \
            $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
            tee /etc/apt/sources.list.d/docker.list > /dev/null
          apt-get update

    - name: Install Docker
      ansible.builtin.shell:
        cmd: apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

    - name: Download cri-dockerd
      ansible.builtin.shell:
        cmd: wget https://github.com/Mirantis/cri-dockerd/releases/download/v0.3.13/cri-dockerd-0.3.13.amd64.tgz
    
    - name: Extract cri-dockerd
      ansible.builtin.shell:
        cmd: tar -xvf cri-dockerd-0.3.13.amd64.tgz

    - name : Install kube dependecies and add keyring
      ansible.builtin.shell:
        cmd: |
          apt-get update
          apt-get install -y apt-transport-https ca-certificates curl gpg
          sudo bash -c "rm -f /etc/apt/keyrings/kubernetes-apt-keyring.gpg && yes | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg < <(curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key)"
   
    - name: Add Kubernetes repository
      ansible.builtin.shell:
        cmd: echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
    
    - name: Install kubelet, kubeadm and kubectl
      ansible.builtin.shell:
        cmd: |
          apt-get update
          apt-get install -y kubelet kubeadm kubectl
          apt-mark hold kubelet kubeadm kubectl
    
    - name: Enable kubelet service
      ansible.builtin.shell: 
        cmd: systemctl enable --now kubelet
    
    - name: Start cri-dockerd in background
      ansible.builtin.shell:
        cmd: sudo ./cri-dockerd/cri-dockerd > /tmp/cri-dockerd.log 2>&1 &
      async: 5
      poll: 0

    - name: Wait for cri-dockerd to be ready 1/2
      ansible.builtin.shell:
        cmd: grep -q 'Start cri-dockerd grpc backend' /tmp/cri-dockerd.log
      register: result
      until: result.rc == 0
      retries: 5
      delay: 10
    
    - name: Wait for cri-dockerd to be ready 2/2
      ansible.builtin.pause:
        seconds: 10

    - name: Initialize kube cluster
      ansible.builtin.shell:
        cmd: sudo kubeadm init --pod-network-cidr=10.244.0.0/16 --cri-socket=unix:///var/run/cri-dockerd.sock

    - name: Copy kube config to user
      ansible.builtin.shell:
        cmd: mkdir -p $HOME/.kube && sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config && sudo chown $(id -u):$(id -g) $HOME/.kube/config

    - name: Apply Flannel
      ansible.builtin.shell:
        cmd: kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
    
    - name: Untaint nodes
      ansible.builtin.shell:
        cmd: kubectl taint nodes --all node-role.kubernetes.io/control-plane-

    - name: install pip3
      ansible.builtin.package:
        name: python3-pip
        state: present
  
    - name: install python3 libraries
      ansible.builtin.pip:
        name: "{{ item }}"
      loop:
        - kubernetes
        - openshift
        - docker
        - PyYAML
    
    - name: Local Path Provisionar
      ansible.builtin.shell:
        cmd: kubectl apply -f https://raw.githubusercontent.com/rancher/local-path-provisioner/master/deploy/local-path-storage.yaml

    - name: Annotate storageclass
      ansible.builtin.shell:
        cmd: kubectl annotate storageclass local-path storageclass.kubernetes.io/is-default-class=true
    
    - name: Create namespaces
      kubernetes.core.k8s:
        state: present
        definition: "{{ lookup('file', '../../k8s-manifests/namespace-creation.yaml') | from_yaml_all }}"
    
    - name: Add ngrok Helm repository
      ansible.builtin.command: helm repo add ngrok https://ngrok.github.io/kubernetes-ingress-controller
    
    - name: Add helm repo prometheus-community
      ansible.builtin.command: helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
    
    - name: Add Bitnami Helm repository
      ansible.builtin.command: helm repo add bitnami https://charts.bitnami.com/bitnami

    - name: Update Helm repositories
      ansible.builtin.command: helm repo update

    - name: Deploy RabbitMQ
      kubernetes.core.helm:
        name: rabbitmq
        chart_ref: bitnami/rabbitmq
        release_namespace: rabbitmq-system
        values:
          existingSecret: rabbitmq-credentials
          replicaCount: 3
          persistence:
            enabled: true
          resources:
            limits:
              memory: 16Gi
    
    - name: Get secret from rabbitmq-system namespace
      kubernetes.core.k8s_info:
        kind: Secret
        name: rabbitmq
        namespace: rabbitmq-system
      register: secret_info
      until: (secret_info.resources | default([])) | length > 0
      retries: 20
      delay: 10

    - name: Create secret in default namespace
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: "rabbitmq"
            namespace: default
          type: "{{ secret_info.resources[0].type }}"
          data: "{{ secret_info.resources[0].data }}"

    - name: Apply Kubernetes deployments and services
      kubernetes.core.k8s:
        definition: "{{ item }}"
      loop:
        - "{{ lookup('file', '../../k8s-manifests/postgres-pv.yaml') | from_yaml_all }}"
        - "{{ lookup('file', '../../k8s-manifests/postgres-pvc.yaml') | from_yaml_all }}"
        - "{{ lookup('file', '../../k8s-manifests/cluster-role-job-creator.yaml') | from_yaml_all }}"
        - "{{ lookup('file', '../../k8s-manifests/clusterrolebinding-job-creator.yaml') | from_yaml_all }}"
        - "{{ lookup('file', '../../k8s-manifests/api-gateway-deployment.yaml') | from_yaml_all }}"
        - "{{ lookup('file', '../../k8s-manifests/api-gateway-service.yaml') | from_yaml_all }}"
        - "{{ lookup('file', '../../k8s-manifests/job-handler-deployment.yaml') | from_yaml_all }}"
        - "{{ lookup('file', '../../k8s-manifests/job-handler-service.yaml') | from_yaml_all }}"
        - "{{ lookup('file', '../../k8s-manifests/knowledge-base-database-deployment.yaml') | from_yaml_all }}"
        - "{{ lookup('file', '../../k8s-manifests/knowledge-base-database-service.yaml') | from_yaml_all }}"
        - "{{ lookup('file', '../../k8s-manifests/knowledge-base-deployment.yaml') | from_yaml_all }}"
        - "{{ lookup('file', '../../k8s-manifests/knowledge-base-service.yaml') | from_yaml_all }}"
        - "{{ lookup('file', '../../k8s-manifests/frontend-deployment.yaml') | from_yaml_all }}"
        - "{{ lookup('file', '../../k8s-manifests/frontend-service.yaml') | from_yaml_all }}"

    - name: Include vars of vars.json
      ansible.builtin.include_vars:
        file: ../../.environmentals.json
        
    - name: Install ngrok-ingress-controller
      kubernetes.core.helm:
        name: ngrok
        chart_ref: ngrok/kubernetes-ingress-controller
        release_namespace: ngrok-ingress-controller
        create_namespace: true
        values:
          credentials:
            apiKey: "{{ NGROK_API_KEY }}" 
            authtoken: "{{ NGROK_AUTHTOKEN }}"
    
    - name: Apply Kubernetes deployments and services
      kubernetes.core.k8s:
        definition: "{{ item }}"
      loop:
        - "{{ lookup('file', '../../k8s-manifests/ngrok-ingress.yaml') | from_yaml_all }}"
    
    # - name: Install Prometheus
    #   kubernetes.core.helm:
    #     name: prometheus-operator
    #     chart_ref: prometheus-community/kube-prometheus-stack
    #     release_namespace: monitoring